var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ConstraintModels","category":"page"},{"location":"#ConstraintModels","page":"Home","title":"ConstraintModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ConstraintModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ConstraintModels]","category":"page"},{"location":"#ConstraintModels.SudokuInstance","page":"Home","title":"ConstraintModels.SudokuInstance","text":"mutable struct SudokuInstance{T <: Integer} <: AbstractMatrix{T}\n\nA struct for SudokuInstances, which is a subtype of AbstractMatrix.\n\nSudokuInstance(A::AbstractMatrix{T})\nSudokuInstance(::Type{T}, n::Int) # fill in blank sudoku of type T\nSudokuInstance(n::Int) # fill in blank sudoku of type Int\nSudokuInstance(::Type{T}) # fill in \"standard\" 9×9 sudoku of type T\nSudokuInstance() # fill in \"standard\" 9×9 sudoku of type Int\nSudokuInstance(n::Int, P::Pair{Tuple{Int, Int}, T}...) where {T <: Integer} # construct a sudoku given pairs of coordinates and values\nSudokuInstance(P::Pair{Tuple{Int, Int}, T}...) # again, default to 9×9 sudoku, constructing given pairs\n\nConstructor functions for the SudokuInstance struct.\n\n\n\n\n\n","category":"type"},{"location":"#ConstraintModels.SudokuInstance-Tuple{Dictionaries.Dictionary}","page":"Home","title":"ConstraintModels.SudokuInstance","text":"SudokuInstance(X::Dictionary)\n\nConstruct a SudokuInstance with the values X of a solver as input.\n\n\n\n\n\n","category":"method"},{"location":"#Base.Multimedia.display-Tuple{Any, ConstraintModels.SudokuInstance}","page":"Home","title":"Base.Multimedia.display","text":"display(io::IO, S::SudokuInstance)\ndisplay(S::SudokuInstance) # default to stdout\n\nDisplays an ntimes n SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"#Base.Multimedia.display-Tuple{Any, Val{:sudoku}}","page":"Home","title":"Base.Multimedia.display","text":"Base.display(X, Val(:sudoku))\n\nExtends Base.display to a sudoku configuration.\n\n\n\n\n\n","category":"method"},{"location":"#Base.Multimedia.display-Tuple{ConstraintModels.SudokuInstance}","page":"Home","title":"Base.Multimedia.display","text":"Base.display(S::SudokuInstance)\n\nExtends Base.display to SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"#Base.Multimedia.display-Tuple{Dictionaries.Dictionary}","page":"Home","title":"Base.Multimedia.display","text":"Base.display(X::Dictionary)\n\nExtends Base.display to a sudoku configuration.\n\n\n\n\n\n","category":"method"},{"location":"#Base.size-Tuple{ConstraintModels.SudokuInstance}","page":"Home","title":"Base.size","text":"Base.size(S::SudokuInstance)\n\nExtends Base.size for SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels._format_line-Tuple{Any, Any}","page":"Home","title":"ConstraintModels._format_line","text":"_format_line(r, M)\n\nFormat line of a sudoku grid.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels._format_line_segment-Tuple{Any, Any, Any}","page":"Home","title":"ConstraintModels._format_line_segment","text":"_format_line_segment(r, col_pos, M)\n\nFormat line segment of a sudoku grid.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels._format_val-Tuple{Any}","page":"Home","title":"ConstraintModels._format_val","text":"_format_val(a)\n\nFormat an integer a into a string for SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels._get_sep_line-Tuple{Any, Any, Any}","page":"Home","title":"ConstraintModels._get_sep_line","text":"_get_sep_line(s, pos_row, M)\n\nReturn a line separator.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels.chemical_equilibrium-Tuple{Any, Any, Any}","page":"Home","title":"ConstraintModels.chemical_equilibrium","text":"chemical_equilibrium(atoms_compounds, elements_weights, standard_free_energy; modeler = :JuMP)\n\nwarning: Warning\nEven the structure to model problems with continuous domains is available, the default solver is not yet equiped to solve such problems efficiently.\n\nFrom Wikipedia\n\nIn a chemical reaction, chemical equilibrium is the state in which both the reactants and products are present in concentrations which have no further tendency to change with time, so that there is no observable change in the properties of the system. This state results when the forward reaction proceeds at the same rate as the reverse reaction. The reaction rates of the forward and backward reactions are generally not zero, but they are equal. Thus, there are no net changes in the concentrations of the reactants and products. Such a state is known as dynamic equilibrium.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels.golomb","page":"Home","title":"ConstraintModels.golomb","text":"golomb(n, L=n²)\n\nModel the Golomb problem of n marks on the ruler 0:L. The modeler argument accepts :raw, and :JuMP (default), which refer respectively to the solver internal model, the MathOptInterface model, and the JuMP model.\n\n\n\n\n\n","category":"function"},{"location":"#ConstraintModels.magic_square-Tuple{Any}","page":"Home","title":"ConstraintModels.magic_square","text":"magic_square(n; modeler = :JuMP)\n\nCreate a model for the magic square problem of order n. The modeler argument accepts :JuMP (default), which refer to the solver the JuMP model.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels.mincut-Tuple{Any}","page":"Home","title":"ConstraintModels.mincut","text":"mincut(graph; source, sink, interdiction =0, modeler = :JuMP)\n\nCompute the minimum cut of a graph.\n\nArguments:\n\ngraph: Any matrix <: AbstractMatrix that describes the capacities of the graph\nsource: Id of the source node; must be set\nsink: Id of the sink node; must be set\ninterdiction: indicates the number of forbidden links\nmodeler: Default to :JuMP.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels.n_queens-Tuple{Any}","page":"Home","title":"ConstraintModels.n_queens","text":"n_queens(n; modeler = :JuMP)\n\nCreate a model for the n-queens problem with n queens. The modeler argument accepts :JuMP (default), which refer to the JuMP model.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels.qap-Tuple{Any, Any, Any}","page":"Home","title":"ConstraintModels.qap","text":"qap(n, weigths, distances; modeler = :JuMP)\n\nModelize an instance of the Quadractic Assignment Problem with\n\nn: number of both facilities and locations\nweights: Matrix of the weights of each pair of facilities\ndistances: Matrix of distances between locations\nmodeler: Default to :JuMP. No other modeler available for now.\n\nFrom Wikipedia\n\nThere are a set of n facilities and a set of n locations. For each pair of locations, a distance is specified and for each pair of facilities a weight or flow is specified (e.g., the amount of supplies transported between the two facilities). The problem is to assign all facilities to different locations with the goal of minimizing the sum of the distances multiplied by the corresponding flows.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels.scheduling-Tuple{Any, Any}","page":"Home","title":"ConstraintModels.scheduling","text":"scheduling(processing_time, due_date; modeler=:JuMP)\n\nCreate a model for the n-queens problem with n queens. The modeler argument accepts :JuMP (default), which refer to the JuMP model.\n\nwarning: Warning\nThe model seems to have a flaw. Needs to be investigated.\n\n\n\n\n\n","category":"method"},{"location":"#ConstraintModels.sudoku-Tuple{Any}","page":"Home","title":"ConstraintModels.sudoku","text":"sudoku(n; start= Dictionary{Int, Int}(), modeler = :JuMP)\n\nCreate a model for the sudoku problem of domain 1:n² with optional starting values. The modeler argument accepts :raw, :MOI, and :JuMP (default), which refer respectively to the solver internal model, the MathOptInterface model, and the JuMP model.\n\n# Construct a JuMP model `m` and its associated matrix `grid` for sudoku 9×9\nm, grid = sudoku(3)\n\n# Same with a starting instance\ninstance = [\n    9  3  0  0  0  0  0  4  0\n    0  0  0  0  4  2  0  9  0\n    8  0  0  1  9  6  7  0  0\n    0  0  0  4  7  0  0  0  0\n    0  2  0  0  0  0  0  6  0\n    0  0  0  0  2  3  0  0  0\n    0  0  8  5  3  1  0  0  2\n    0  9  0  2  8  0  0  0  0\n    0  7  0  0  0  0  0  5  3\n]\nm, grid = sudoku(3, start = instance)\n\n# Run the solver\noptimize!(m)\n\n# Retrieve and display the values\nsolution = value.(grid)\ndisplay(solution, Val(:sudoku))\n\n\n\n\n\n","category":"method"}]
}
